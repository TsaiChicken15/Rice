package rice.utils;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.util.AxisAlignedBB;

public class RenderUtil implements MCHook
{
	public static void drawPlayerBox(double posX, double posY, double posZ, int color) 
	{
		double x =
			posX - 0.5
				- mc.getRenderManager().renderPosX;
		double y =
			posY
				- mc.getRenderManager().renderPosY;
		double z =
			posZ - 0.5
				- mc.getRenderManager().renderPosZ;
		GL11.glBlendFunc(770, 771);
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glLineWidth(2.0F);
		GL11.glColor4d(0, 1, 0, 0.15F);
		GL11.glDisable(GL11.GL_TEXTURE_2D);
		GL11.glDisable(GL11.GL_DEPTH_TEST);
		GL11.glDepthMask(false);
		//drawColorBox(new AxisAlignedBB(x, y, z, x + 1.0, y + 1.0, z + 1.0));
		GL11.glColor4d(1, 1, 1, 0.5F);
		RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x + 0.2, y, z + 0.2,
			x + 0.8, y + 1.8, z + 0.8), color);
		GL11.glEnable(GL11.GL_TEXTURE_2D);
		GL11.glEnable(GL11.GL_DEPTH_TEST);
		GL11.glDepthMask(true);	
		GL11.glDisable(GL11.GL_BLEND);
		GL11.glColor4f(1, 1, 1, 1);
    }
	
	public static void drawRoundedRect(float left, float top, float right, float bottom, int color, float radius)
    {
    	float var5;

        if (left < right)
        {
            var5 = left;
            left = right;
            right = var5;
        }

        if (top < bottom)
        {
            var5 = top;
            top = bottom;
            bottom = var5;
        }

        float var11 = (float)(color >> 24 & 255) / 255.0F;
        float var6 = (float)(color >> 16 & 255) / 255.0F;
        float var7 = (float)(color >> 8 & 255) / 255.0F;
        float var8 = (float)(color & 255) / 255.0F;
        Tessellator var9 = Tessellator.getInstance();
        WorldRenderer var10 = var9.getWorldRenderer();
        GlStateManager.enableBlend();
        GlStateManager.func_179090_x();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color(var6, var7, var8, var11);
        var10.startDrawingQuads();
        for(int i=180;i<270;i++) var10.addVertex((double)left+radius-Math.cos(Math.toRadians(i)*radius), (double)bottom-radius+Math.sin(Math.toRadians(i)*radius), 0.0D);
        var10.addVertex((double)left+radius, (double)bottom, 0.0D);
        var10.addVertex((double)right-radius, (double)bottom, 0.0D);
        for(int i=270;i<360;i++) var10.addVertex((double)right-radius+Math.cos(Math.toRadians(i)), (double)bottom-radius-Math.sin(Math.toRadians(i)*radius), 0.0D);
        var10.addVertex((double)right, (double)top-radius, 0.0D);
        for(int i=0;i<90;i++) var10.addVertex((double)right-radius+Math.cos(Math.toRadians(i)*radius), (double)top-radius+Math.sin(Math.toRadians(i)*radius), 0.0D);
        var10.addVertex((double)left-radius, (double)top, 0.0D);
        for(int i=90;i<180;i++) var10.addVertex((double)left-radius+Math.cos(Math.toRadians(i)*radius), (double)top-radius+Math.sin(Math.toRadians(i)*radius), 0.0D);
        var9.draw();
        GlStateManager.func_179098_w();
        GlStateManager.disableBlend();
    }
}